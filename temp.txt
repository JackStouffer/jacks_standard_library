    1: /**
    2:  * Copyright (c) 2025 Jack Stouffer
    3:  * 
    4:  * Permission is hereby granted, free of charge, to any person obtaining a
    5:  * copy of this software and associated documentation files (the “Software”),
    6:  * to deal in the Software without restriction, including without limitation
    7:  * the rights to use, copy, modify, merge, publish, distribute, sublicense,
    8:  * and/or sell copies of the Software, and to permit persons to whom the Software
    9:  * is furnished to do so, subject to the following conditions:
   10:  *
   11:  * The above copyright notice and this permission notice shall be included in all
   12:  * copies or substantial portions of the Software.
   13:  *
   14:  * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   15:  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   16:  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   17:  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
   18:  * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
   19:  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
   20:  */
   21: 
   22: #define _CRT_SECURE_NO_WARNINGS
   23: 
   24: #include <assert.h>
   25: #include <locale.h>
   26: #include <stdbool.h>
   27: #include <stdint.h>
   28: #include <string.h>
   29: #include <stdio.h>
   30: #include <stdlib.h>
   31: 
   32: #define JSL_IMPLEMENTATION
   33: #define JSL_INCLUDE_FILE_UTILS
   34: #include "../src/jacks_standard_library.h"
   35: 
   36: #include "minctest.h"
   37: 
   38: void test_jsl_fatptr_from_cstr(void)
   40:     char* c_str = "This is a test string!";
   41:     size_t length = strlen(c_str);
   42: 
   43:     JSLFatPtr str = jsl_fatptr_from_cstr(c_str);
   44: 
   45:     lok((void*) str.data == (void*) c_str);
   46:     lok((int64_t) str.length == (int64_t) length);
   47:     lok(memcmp(c_str, str.data, str.length) == 0);
   49: 
   50: void test_jsl_fatptr_cstr_memory_copy(void)
   52:     JSLFatPtr buffer = jsl_fatptr_init(malloc(1024), 1024);
   53:     lok((int64_t) buffer.length == (int64_t) 1024);
   54: 
   55:     JSLFatPtr writer = buffer;
   56:     char* str = "This is a test string!";
   57:     int64_t length = (int64_t) strlen(str);
   58:     jsl_fatptr_cstr_memory_copy(&writer, str, false);
   59: 
   60:     lok(writer.data == buffer.data + length);
   61:     lok(writer.length == 1024 - length);
   62:     lok((int64_t) buffer.length == (int64_t) 1024);
   63: 
   64:     lok(memcmp(str, buffer.data, length) == 0);
   66: 
   67: void test_jsl_load_file_contents(void)
   69:     #if defined(_WIN32)
   70:         char* path = "tests\\example.txt";
   71:     #else
   72:         char* path = "./tests/example.txt";
   73:     #endif
   74: 
   75:     char stack_buffer[4*1024] = 75;
   76:     int64_t file_size;
   77: 
   78:     // Load the comparison using libc
   80:         FILE* file = fopen(path, "rb");
   81:         fseek(file, 0, SEEK_END);
   82:         file_size = ftell(file);
   83:         lok(file_size > 0);
   84:         rewind(file);
   85: 
   86:         fread(stack_buffer, file_size, 1, file);
   88: 
   89:     JSLArena arena;
   90:     jsl_arena_init(&arena, malloc(4*1024), 4*1024);
   91: 
   92:     JSLFatPtr contents;
   93:     JSLLoadFileResultEnum res = jsl_load_file_contents(
   94:         &arena,
   95:         jsl_fatptr_from_cstr(path),
   96:         &contents,
   97:         NULL
   98:     );
   99: 
  100:     lok(res == JSL_FILE_LOAD_SUCCESS);
  101:     // printf("stack_buffer %s\n", stack_buffer);
  102:     // jsl_format_file(stdout, JSL_FATPTR_LITERAL("%y\n"), contents);
  103:     lmemcmp(stack_buffer, contents.data, file_size);
  105: 
  106: void test_jsl_load_file_contents_buffer(void)
  108:     char* path = "./tests/example.txt";
  109:     char stack_buffer[4*1024];
  110:     int64_t file_size;
  111: 
  112:     // Load the comparison using libc
  114:         FILE* file = fopen(path, "rb");
  115:         fseek(file, 0, SEEK_END);
  116:         file_size = ftell(file);
  117:         lok(file_size > 0);
  118:         rewind(file);
  119: 
  120:         fread(stack_buffer, file_size, 1, file);
  122: 
  123:     JSLFatPtr buffer = jsl_fatptr_init(malloc(4*1024), 4*1024);
  124:     JSLFatPtr writer = buffer;
  125: 
  126:     JSLLoadFileResultEnum res = jsl_load_file_contents_buffer(
  127:         &writer,
  128:         JSL_FATPTR_LITERAL("./tests/example.txt"),
  129:         NULL
  130:     );
  131: 
  132:     lok(res == JSL_FILE_LOAD_SUCCESS);
  133:     lok(memcmp(stack_buffer, buffer.data, file_size) == 0);
  135: 
  136: void test_jsl_fatptr_memory_compare(void)
  138:     JSLFatPtr buffer1 = jsl_fatptr_init(malloc(13), 13);
  139:     JSLFatPtr buffer2 = jsl_fatptr_init(malloc(13), 13);
  140:     JSLFatPtr buffer3 = jsl_fatptr_init(malloc(13), 13);
  141:     JSLFatPtr buffer4 = jsl_fatptr_init(malloc(20), 20);
  142: 
  143:     JSLFatPtr writer1 = buffer1;
  144:     JSLFatPtr writer2 = buffer2;
  145:     JSLFatPtr writer3 = buffer3;
  146:     JSLFatPtr writer4 = buffer4;
  147: 
  148:     jsl_fatptr_cstr_memory_copy(&writer1, "Hello, World!", false);
  149:     jsl_fatptr_cstr_memory_copy(&writer2, "Hello, Owrld!", false);
  150:     jsl_fatptr_cstr_memory_copy(&writer3, "Hello, World!", false);
  151:     jsl_fatptr_cstr_memory_copy(&writer4, "Hello, World!", false);
  152: 
  153:     lok( jsl_fatptr_memory_compare(buffer1, buffer1));
  154:     lok(!jsl_fatptr_memory_compare(buffer1, buffer2));
  155:     lok( jsl_fatptr_memory_compare(buffer1, buffer3));
  156:     lok(!jsl_fatptr_memory_compare(buffer1, buffer4));
  158: 
  159: void test_jsl_fatptr_slice(void)
  161:     JSLFatPtr buffer1 = jsl_fatptr_init(malloc(13), 13);
  162: 
  164:         JSLFatPtr writer1 = buffer1;
  165:         jsl_fatptr_cstr_memory_copy(&writer1, "Hello, World!", false);
  166: 
  167:         JSLFatPtr slice1 = jsl_fatptr_slice(buffer1, 0, buffer1.length);
  168:         lok(jsl_fatptr_memory_compare(buffer1, slice1));
  170: 
  172:         JSLFatPtr buffer2 = jsl_fatptr_init(malloc(10), 10);
  173:         JSLFatPtr writer2 = buffer2;
  174:         jsl_fatptr_cstr_memory_copy(&writer2, "Hello, Wor", false);
  175: 
  176:         JSLFatPtr slice2 = jsl_fatptr_slice(buffer1, 0, 10);
  177:         lok(jsl_fatptr_memory_compare(buffer2, slice2));
  179: 
  181:         JSLFatPtr buffer3 = jsl_fatptr_init(malloc(5), 5);
  182:         JSLFatPtr writer3 = buffer3;
  183:         jsl_fatptr_cstr_memory_copy(&writer3, "lo, W", false);
  184: 
  185:         JSLFatPtr slice3 = jsl_fatptr_slice(buffer1, 3, 8);
  186:         lok(jsl_fatptr_memory_compare(buffer3, slice3));
  189: 
  190: void test_jsl_fatptr_substring_search(void)
  193:         JSLFatPtr string = jsl_fatptr_from_cstr("");
  194:         JSLFatPtr substring = jsl_fatptr_from_cstr("");
  195:         int64_t res = jsl_fatptr_substring_search(string, substring);
  196:         lok(res == -1);
  198:     
  200:         JSLFatPtr string = jsl_fatptr_from_cstr("");
  201:         JSLFatPtr substring = jsl_fatptr_from_cstr("111111");
  202:         int64_t res = jsl_fatptr_substring_search(string, substring);
  203:         lok(res == -1);
  205: 
  207:         JSLFatPtr string = jsl_fatptr_from_cstr("111111");
  208:         JSLFatPtr substring = jsl_fatptr_from_cstr("");
  209:         int64_t res = jsl_fatptr_substring_search(string, substring);
  210:         lok(res == -1);
  212: 
  214:         JSLFatPtr string = jsl_fatptr_from_cstr("Hello, World!");
  215:         JSLFatPtr substring = jsl_fatptr_from_cstr("Longer substring than the original string");
  216:         int64_t res = jsl_fatptr_substring_search(string, substring);
  217:         lok(res == -1);
  219: 
  221:         JSLFatPtr string = jsl_fatptr_from_cstr("111111");
  222:         JSLFatPtr substring = jsl_fatptr_from_cstr("1");
  223:         int64_t res = jsl_fatptr_substring_search(string, substring);
  224:         lok(res == 0);
  226: 
  228:         JSLFatPtr string = jsl_fatptr_from_cstr("Hello, World!");
  229:         JSLFatPtr substring = jsl_fatptr_from_cstr("W");
  230:         int64_t res = jsl_fatptr_substring_search(string, substring);
  231:         lok(res == 7);
  233: 
  235:         JSLFatPtr string = jsl_fatptr_from_cstr("Hello, World!");
  236:         JSLFatPtr substring = jsl_fatptr_from_cstr("World");
  237:         int64_t res = jsl_fatptr_substring_search(string, substring);
  238:         lok(res == 7);
  240: 
  242:         JSLFatPtr string = jsl_fatptr_from_cstr("Hello, World!");
  243:         JSLFatPtr substring = jsl_fatptr_from_cstr("Hello, World!");
  244:         int64_t res = jsl_fatptr_substring_search(string, substring);
  245:         lok(res == 0);
  247: 
  249:         JSLFatPtr string = jsl_fatptr_from_cstr("Hello, World!");
  250:         JSLFatPtr substring = jsl_fatptr_from_cstr("Blorp");
  251:         int64_t res = jsl_fatptr_substring_search(string, substring);
  252:         lok(res == -1);
  254: 
  256:         JSLFatPtr string = jsl_fatptr_from_cstr("This is a very long string that is going to trigger SIMD code, as it's longer than a single AVX2 register when using 8-bit values, which we are since we're using ASCII/UTF-8.");
  257:         JSLFatPtr substring = jsl_fatptr_from_cstr("8-bit");
  258:         int64_t res = jsl_fatptr_substring_search(string, substring);
  259:         lok(res == 117);
  261: 
  263:         JSLFatPtr string = jsl_fatptr_from_cstr("This is a very long string that is going to trigger SIMD code, as it's longer than a single AVX2 register when using 8-bit values, which we are since we're using ASCII/UTF-8.");
  264:         JSLFatPtr substring = jsl_fatptr_from_cstr("8-blit");
  265:         int64_t res = jsl_fatptr_substring_search(string, substring);
  266:         lok(res == -1);
  268: 
  270:         JSLFatPtr string = jsl_fatptr_from_cstr("This is a very long string that is going to trigger SIMD code, as it's longer than a single AVX2 register when using 8-bit values, which we are since we're using ASCII/UTF-8.");
  271:         JSLFatPtr substring = jsl_fatptr_from_cstr("ASCII");
  272:         int64_t res = jsl_fatptr_substring_search(string, substring);
  273:         lok(res == 162);
  275: 
  277:         JSLFatPtr string = jsl_fatptr_from_cstr("This is a very long string that is going to trigger SIMD code, as it's longer than a single AVX2 register when using 8-bit values, which we are since we're using ASCII/UTF-8.");
  278:         JSLFatPtr substring = jsl_fatptr_from_cstr("This is a very long string that is going to trigger SIMD code, as it's longer than a single AVX2 register when using 8-bit values, which we are since we're using ASCII/UTF-8.");
  279:         int64_t res = jsl_fatptr_substring_search(string, substring);
  280:         lok(res == 0);
  282: 
  284:         JSLFatPtr string = jsl_fatptr_from_cstr("This is a very long string that is going to trigger SIMD code, as it's longer than a single AVX2 register when using 8-bit values, which we are since we're using ASCII/UTF-8.");
  285:         JSLFatPtr substring = jsl_fatptr_from_cstr("single AVX2 register when using 8-bit values, which we are since we're using ASCII/UTF-8.");
  286:         int64_t res = jsl_fatptr_substring_search(string, substring);
  287:         lok(res == 85);
  289: 
  291:         JSLFatPtr string = jsl_fatptr_from_cstr("This is a very long string that is going to trigger SIMD code, as it's longer than a single AVX2 register when using 8-bit values, which we are since we're using ASCII/UTF-8.");
  292:         JSLFatPtr substring = jsl_fatptr_from_cstr("Blorf");
  293:         int64_t res = jsl_fatptr_substring_search(string, substring);
  294:         lok(res == -1);
  297: 
  298: void test_jsl_fatptr_index_of(void)
  300:     JSLFatPtr buffer1 = jsl_fatptr_from_cstr("");
  301:     int64_t res1 = jsl_fatptr_index_of(buffer1, '3');
  302:     lok(res1 == -1);
  303: 
  304:     JSLFatPtr buffer2 = jsl_fatptr_from_cstr(".");
  305:     int64_t res2 = jsl_fatptr_index_of(buffer2, '.');
  306:     lok(res2 == 0);
  307: 
  308:     JSLFatPtr buffer3 = jsl_fatptr_from_cstr("......");
  309:     int64_t res3 = jsl_fatptr_index_of(buffer3, '.');
  310:     lok(res3 == 0);
  311: 
  312:     JSLFatPtr buffer4 = jsl_fatptr_from_cstr("Hello.World");
  313:     int64_t res4 = jsl_fatptr_index_of(buffer4, '.');
  314:     lok(res4 == 5);
  315: 
  316:     JSLFatPtr buffer5 = jsl_fatptr_from_cstr("Hello          . Hello");
  317:     int64_t res5 = jsl_fatptr_index_of(buffer5, '.');
  318:     lok(res5 == 15);
  319: 
  320:     JSLFatPtr buffer6 = jsl_fatptr_from_cstr("Hello.World.");
  321:     int64_t res6 = jsl_fatptr_index_of(buffer6, '.');
  322:     lok(res6 == 5);
  323: 
  324:     JSLFatPtr buffer7 = jsl_fatptr_from_cstr("Hello Hello ");
  325:     int64_t res7 = jsl_fatptr_index_of(buffer7, ' ');
  326:     lok(res7 == 5);
  327: 
  328:     JSLFatPtr buffer8 = jsl_fatptr_from_cstr("This is a very long string that is going to trigger SIMD code, as it's longer than a single AVX2 register when using 8-bit values, which we are since we're using ASCII/UTF-8.");
  329:     int64_t res8 = jsl_fatptr_index_of(buffer8, '8');
  330:     lok(res8 == 117);
  332: 
  333: void test_jsl_fatptr_index_of_reverse(void)
  335:     JSLFatPtr buffer1 = jsl_fatptr_from_cstr("");
  336:     int64_t res1 = jsl_fatptr_index_of_reverse(buffer1, '3');
  337:     lok(res1 == -1);
  338: 
  339:     JSLFatPtr buffer2 = jsl_fatptr_from_cstr(".");
  340:     int64_t res2 = jsl_fatptr_index_of_reverse(buffer2, '.');
  341:     lok(res2 == 0);
  342: 
  343:     JSLFatPtr buffer3 = jsl_fatptr_from_cstr("......");
  344:     int64_t res3 = jsl_fatptr_index_of_reverse(buffer3, '.');
  345:     lok(res3 == 5);
  346: 
  347:     JSLFatPtr buffer4 = jsl_fatptr_from_cstr("Hello.World");
  348:     int64_t res4 = jsl_fatptr_index_of_reverse(buffer4, '.');
  349:     lok(res4 == 5);
  350: 
  351:     JSLFatPtr buffer5 = jsl_fatptr_from_cstr("Hello          . Hello");
  352:     int64_t res5 = jsl_fatptr_index_of_reverse(buffer5, '.');
  353:     lok(res5 == 15);
  354: 
  355:     JSLFatPtr buffer6 = jsl_fatptr_from_cstr("Hello.World.");
  356:     int64_t res6 = jsl_fatptr_index_of_reverse(buffer6, '.');
  357:     lok(res6 == 11);
  358: 
  359:     JSLFatPtr buffer7 = jsl_fatptr_from_cstr("This is a very long string that is going to trigger SIMD code, as it's longer than a single AVX2 register when using 8-bit values, which we are since we're using ASCII/UTF-8.");
  360:     int64_t res7 = jsl_fatptr_index_of_reverse(buffer7, 'M');
  361:     lok(res7 == 54);
  362: 
  363:     JSLFatPtr buffer8 = jsl_fatptr_from_cstr("This is a very long string that is going to trigger SIMD code, as it's longer than a single AVX2 register when using 8-bit values, which we are since we're using ASCII/UTF-8.");
  364:     int64_t res8 = jsl_fatptr_index_of_reverse(buffer8, 'w');
  365:     lok(res8 == 150);
  367: 
  368: void test_jsl_fatptr_get_file_extension(void)
  370:     JSLFatPtr buffer1 = jsl_fatptr_from_cstr("");
  371:     JSLFatPtr res1 = jsl_fatptr_get_file_extension(buffer1);
  372:     lok(jsl_fatptr_cstr_compare(res1, ""));
  373: 
  374:     JSLFatPtr buffer2 = jsl_fatptr_from_cstr(".");
  375:     JSLFatPtr res2 = jsl_fatptr_get_file_extension(buffer2);
  376:     lok(jsl_fatptr_cstr_compare(res2, ""));
  377: 
  378:     JSLFatPtr buffer3 = jsl_fatptr_from_cstr("......");
  379:     JSLFatPtr res3 = jsl_fatptr_get_file_extension(buffer3);
  380:     lok(jsl_fatptr_cstr_compare(res3, ""));
  381: 
  382:     JSLFatPtr buffer4 = jsl_fatptr_from_cstr("Hello.text");
  383:     JSLFatPtr res4 = jsl_fatptr_get_file_extension(buffer4);
  384:     lok(jsl_fatptr_cstr_compare(res4, "text"));
  385: 
  386:     JSLFatPtr buffer5 = jsl_fatptr_from_cstr("Hello          .css");
  387:     JSLFatPtr res5 = jsl_fatptr_get_file_extension(buffer5);
  388:     lok(jsl_fatptr_cstr_compare(res5, "css"));
  389: 
  390:     JSLFatPtr buffer6 = jsl_fatptr_from_cstr("Hello.min.css");
  391:     JSLFatPtr res6 = jsl_fatptr_get_file_extension(buffer6);
  392:     lok(jsl_fatptr_cstr_compare(res6, "css"));
  394: 
  395: void test_jsl_fatptr_to_lowercase_ascii(void)
  397:     JSLArena arena;
  398:     jsl_arena_init(&arena, malloc(1024), 1024);
  399: 
  400:     JSLFatPtr buffer1 = jsl_arena_cstr_to_fatptr(&arena, "10023");
  401:     jsl_fatptr_to_lowercase_ascii(buffer1);
  402:     lok(jsl_fatptr_cstr_compare(buffer1, "10023"));
  403: 
  404:     jsl_arena_reset(&arena);
  405: 
  406:     JSLFatPtr buffer2 = jsl_arena_cstr_to_fatptr(&arena, "hello!@#$@*()");
  407:     jsl_fatptr_to_lowercase_ascii(buffer2);
  408:     lok(jsl_fatptr_cstr_compare(buffer2, "hello!@#$@*()"));
  409: 
  410:     jsl_arena_reset(&arena);
  411: 
  412:     JSLFatPtr buffer3 = jsl_arena_cstr_to_fatptr(&arena, "Population");
  413:     jsl_fatptr_to_lowercase_ascii(buffer3);
  414:     lok(jsl_fatptr_cstr_compare(buffer3, "population"));
  415: 
  416:     jsl_arena_reset(&arena);
  417: 
  418:     JSLFatPtr buffer4 = jsl_arena_cstr_to_fatptr(&arena, "ENTRUSTED");
  419:     jsl_fatptr_to_lowercase_ascii(buffer4);
  420:     lok(jsl_fatptr_cstr_compare(buffer4, "entrusted"));
  421: 
  422:     jsl_arena_reset(&arena);
  423: 
  424:     JSLFatPtr buffer5 = jsl_arena_cstr_to_fatptr(&arena, u8"Footnotes Ω≈ç√∫");
  425:     jsl_fatptr_to_lowercase_ascii(buffer5);
  426:     lok(jsl_fatptr_cstr_compare(buffer5, u8"footnotes Ω≈ç√∫"));
  427: 
  428:     jsl_arena_reset(&arena);
  429: 
  430:     JSLFatPtr buffer6 = jsl_arena_cstr_to_fatptr(&arena, u8"Ω≈ç√∫");
  431:     jsl_fatptr_to_lowercase_ascii(buffer6);
  432:     lok(jsl_fatptr_cstr_compare(buffer6, u8"Ω≈ç√∫"));
  433: 
  434:     jsl_arena_reset(&arena);
  435: 
  436:     JSLFatPtr buffer7 = jsl_arena_cstr_to_fatptr(&arena, u8"Ω≈ç√∫ ENTRUSTED this is a longer string to activate the SIMD path!");
  437:     jsl_fatptr_to_lowercase_ascii(buffer7);
  438:     lok(jsl_fatptr_cstr_compare(buffer7, u8"Ω≈ç√∫ entrusted this is a longer string to activate the simd path!"));
  439: 
  440:     jsl_arena_reset(&arena);
  442: 
  443: void test_jsl_fatptr_to_int32(void)
  445:     int32_t result;
  446: 
  447:     JSLFatPtr buffer1 = jsl_fatptr_from_cstr("0");
  448:     lok(jsl_fatptr_to_int32(buffer1, &result) == 1);
  449:     lok(result == 0);
  450: 
  451:     JSLFatPtr buffer2 = jsl_fatptr_from_cstr("-0");
  452:     lok(jsl_fatptr_to_int32(buffer2, &result) == 2);
  453:     lok(result == 0);
  454: 
  455:     JSLFatPtr buffer3 = jsl_fatptr_from_cstr("11");
  456:     lok(jsl_fatptr_to_int32(buffer3, &result) == 2);
  457:     lok(result == 11);
  458: 
  459:     JSLFatPtr buffer4 = jsl_fatptr_from_cstr("-1243");
  460:     lok(jsl_fatptr_to_int32(buffer4, &result) == 5);
  461:     lok(result == -1243);
  462: 
  463:     JSLFatPtr buffer5 = jsl_fatptr_from_cstr("000003");
  464:     lok(jsl_fatptr_to_int32(buffer5, &result) == 6);
  465:     lok(result == 3);
  466: 
  467:     JSLFatPtr buffer6 = jsl_fatptr_from_cstr("000000");
  468:     lok(jsl_fatptr_to_int32(buffer6, &result) == 6);
  469:     lok(result == 0);
  470: 
  471:     JSLFatPtr buffer7 = jsl_fatptr_from_cstr("-000000");
  472:     lok(jsl_fatptr_to_int32(buffer7, &result) == 7);
  473:     lok(result == 0);
  474: 
  475:     JSLFatPtr buffer8 = jsl_fatptr_from_cstr("98468465");
  476:     lok(jsl_fatptr_to_int32(buffer8, &result) == 8);
  477:     lok(result == 98468465);
  478: 
  479:     JSLFatPtr buffer9 = jsl_fatptr_from_cstr("454 hello, world");
  480:     lok(jsl_fatptr_to_int32(buffer9, &result) == 3);
  481:     lok(result == 454);
  482: 
  483:     JSLFatPtr buffer10 = jsl_fatptr_from_cstr("+488 hello, world");
  484:     lok(jsl_fatptr_to_int32(buffer10, &result) == 4);
  485:     lok(result == 488);
  487: 
  488: void test_jsl_fatptr_starts_with(void)
  490:     JSLFatPtr buffer1 = jsl_fatptr_from_cstr("Hello, World!");
  491:     JSLFatPtr prefix1 = jsl_fatptr_from_cstr("Hello, World!");
  492:     lok(jsl_fatptr_starts_with(buffer1, prefix1) == true);
  493: 
  494:     JSLFatPtr buffer2 = jsl_fatptr_from_cstr("Hello, World!");
  495:     JSLFatPtr prefix2 = jsl_fatptr_from_cstr("Hello");
  496:     lok(jsl_fatptr_starts_with(buffer2, prefix2) == true);
  497: 
  498:     JSLFatPtr buffer3 = jsl_fatptr_from_cstr("Hello, World!");
  499:     JSLFatPtr prefix3 = jsl_fatptr_from_cstr("World");
  500:     lok(jsl_fatptr_starts_with(buffer3, prefix3) == false);
  501: 
  502:     JSLFatPtr buffer4 = jsl_fatptr_from_cstr("Hello, World!");
  503:     JSLFatPtr prefix4 = jsl_fatptr_from_cstr("");
  504:     lok(jsl_fatptr_starts_with(buffer4, prefix4) == true);
  505: 
  506:     JSLFatPtr buffer5 = jsl_fatptr_from_cstr("");
  507:     JSLFatPtr prefix5 = jsl_fatptr_from_cstr("");
  508:     lok(jsl_fatptr_starts_with(buffer5, prefix5) == true);
  509: 
  510:     JSLFatPtr buffer6 = jsl_fatptr_from_cstr("");
  511:     JSLFatPtr prefix6 = jsl_fatptr_from_cstr("HHHHHHHHHHHHHHHHH");
  512:     lok(jsl_fatptr_starts_with(buffer6, prefix6) == false);
  513: 
  514:     JSLFatPtr buffer7 = jsl_fatptr_from_cstr("HHHHHHHHHHHHHHHH");
  515:     JSLFatPtr prefix7 = jsl_fatptr_from_cstr("HHHHHHHHHHHHHHHHH");
  516:     lok(jsl_fatptr_starts_with(buffer7, prefix7) == false);
  518: 
  519: void test_jsl_fatptr_ends_with(void)
  521:     JSLFatPtr buffer1 = jsl_fatptr_from_cstr("Hello, World!");
  522:     JSLFatPtr postfix1 = jsl_fatptr_from_cstr("Hello, World!");
  523:     lok(jsl_fatptr_ends_with(buffer1, postfix1) == true);
  524: 
  525:     JSLFatPtr buffer2 = jsl_fatptr_from_cstr("Hello, World!");
  526:     JSLFatPtr postfix2 = jsl_fatptr_from_cstr("World!");
  527:     lok(jsl_fatptr_ends_with(buffer2, postfix2) == true);
  528: 
  529:     JSLFatPtr buffer3 = jsl_fatptr_from_cstr("Hello, World!");
  530:     JSLFatPtr postfix3 = jsl_fatptr_from_cstr("Hello");
  531:     lok(jsl_fatptr_ends_with(buffer3, postfix3) == false);
  532: 
  533:     JSLFatPtr buffer4 = jsl_fatptr_from_cstr("Hello, World!");
  534:     JSLFatPtr postfix4 = jsl_fatptr_from_cstr("");
  535:     lok(jsl_fatptr_ends_with(buffer4, postfix4) == true);
  536: 
  537:     JSLFatPtr buffer5 = jsl_fatptr_from_cstr("");
  538:     JSLFatPtr postfix5 = jsl_fatptr_from_cstr("");
  539:     lok(jsl_fatptr_ends_with(buffer5, postfix5) == true);
  540: 
  541:     JSLFatPtr buffer6 = jsl_fatptr_from_cstr("");
  542:     JSLFatPtr postfix6 = jsl_fatptr_from_cstr("HHHHHHHHHHHHHHHHH");
  543:     lok(jsl_fatptr_ends_with(buffer6, postfix6) == false);
  544: 
  545:     JSLFatPtr buffer7 = jsl_fatptr_from_cstr("HHHHHHHHHHHHHHHH");
  546:     JSLFatPtr postfix7 = jsl_fatptr_from_cstr("HHHHHHHHHHHHHHHHH");
  547:     lok(jsl_fatptr_ends_with(buffer7, postfix7) == false);
  548: 
  549:     JSLFatPtr buffer8 = jsl_fatptr_from_cstr("Hello, World!");
  550:     JSLFatPtr postfix8 = jsl_fatptr_from_cstr("!");
  551:     lok(jsl_fatptr_ends_with(buffer8, postfix8) == true);
  553: 
  554: void test_jsl_fatptr_compare_ascii_insensitive(void)
  558:             .data = NULL,
  559:             .length = 0
  562:             .data = NULL,
  563:             .length = 0
  565:         lok(jsl_fatptr_compare_ascii_insensitive(buffer1, buffer2) == false);
  567: 
  569:         JSLFatPtr buffer1 = jsl_fatptr_from_cstr("");
  570:         JSLFatPtr buffer2 = jsl_fatptr_from_cstr("");
  571:         lok(jsl_fatptr_compare_ascii_insensitive(buffer1, buffer2) == true);
  573: 
  575:         JSLFatPtr buffer1 = jsl_fatptr_from_cstr("");
  576:         JSLFatPtr buffer2 = jsl_fatptr_from_cstr("Hello, World!");
  577:         lok(jsl_fatptr_compare_ascii_insensitive(buffer1, buffer2) == false);
  579: 
  581:         JSLFatPtr buffer1 = jsl_fatptr_from_cstr("Hello, World!");
  582:         JSLFatPtr buffer2 = jsl_fatptr_from_cstr("Hello, World!");
  583:         lok(jsl_fatptr_compare_ascii_insensitive(buffer1, buffer2) == true);
  585: 
  587:         JSLFatPtr buffer1 = jsl_fatptr_from_cstr("Hello, World!");
  588:         JSLFatPtr buffer2 = jsl_fatptr_from_cstr("hello, world!");
  589:         lok(jsl_fatptr_compare_ascii_insensitive(buffer1, buffer2) == true);
  591: 
  593:         JSLFatPtr buffer1 = jsl_fatptr_from_cstr("AAAAAAAAAA");
  594:         JSLFatPtr buffer2 = jsl_fatptr_from_cstr("AaaaAaAaAA");
  595:         lok(jsl_fatptr_compare_ascii_insensitive(buffer1, buffer2) == true);
  597: 
  600:             .data = NULL,
  601:             .length = 0
  603:         JSLFatPtr buffer2 = jsl_fatptr_from_cstr("THIS is a string example THAT will span multiple AVX2 chunks so THAT we can test if the loop is workING properly.");
  604:         lok(jsl_fatptr_compare_ascii_insensitive(buffer1, buffer2) == false);
  606: 
  608:         JSLFatPtr buffer1 = jsl_fatptr_from_cstr("");
  609:         JSLFatPtr buffer2 = jsl_fatptr_from_cstr("This is a string example that will span multiple AVX2 chunks so that we can test if the loop is working properly.");
  610:         lok(jsl_fatptr_compare_ascii_insensitive(buffer1, buffer2) == false);
  613:         JSLFatPtr buffer1 = jsl_fatptr_from_cstr("This is a string example that will span multiple AVX2 chunks so that we can test if the loop is working properly.");
  614:         JSLFatPtr buffer2 = jsl_fatptr_from_cstr("This is a string example that will span multiple AVX2 chunks so that we can test if the loop is working properly.");
  615:         lok(jsl_fatptr_compare_ascii_insensitive(buffer1, buffer2) == true);
  617: 
  619:         JSLFatPtr buffer1 = jsl_fatptr_from_cstr("This is a string example that WILL span multiple AVX2 chunks so that we can test if the loop is working properly.");
  620:         JSLFatPtr buffer2 = jsl_fatptr_from_cstr("THIS is a string example THAT will span multiple AVX2 chunks so THAT we can test if the loop is workING properly.");
  621:         lok(jsl_fatptr_compare_ascii_insensitive(buffer1, buffer2) == true);
  623: 
  625:         JSLFatPtr buffer1 = jsl_fatptr_from_cstr("This is a string example that WILL span multiple AVX2 chunkz so that we can test if the loop is workING properly.");
  626:         JSLFatPtr buffer2 = jsl_fatptr_from_cstr("THIS is a string example THAT will span multiple AVX2 chunks so THAT we can test if the loop is workING properly.");
  627:         lok(jsl_fatptr_compare_ascii_insensitive(buffer1, buffer2) == false);
  630: 
  631: int main(void)
  633:     lrun("Test jsl_fatptr_from_cstr", test_jsl_fatptr_from_cstr);
  634:     lrun("Test jsl_fatptr_cstr_memory_copy", test_jsl_fatptr_cstr_memory_copy);
  635:     lrun("Test jsl_fatptr_memory_compare", test_jsl_fatptr_memory_compare);
  636:     lrun("Test jsl_fatptr_slice", test_jsl_fatptr_slice);
  637:     lrun("Test jsl_fatptr_index_of", test_jsl_fatptr_index_of);
  638:     lrun("Test jsl_fatptr_index_of_reverse", test_jsl_fatptr_index_of_reverse);
  639:     lrun("Test jsl_fatptr_to_lowercase_ascii", test_jsl_fatptr_to_lowercase_ascii);
  640:     lrun("Test jsl_fatptr_to_int32", test_jsl_fatptr_to_int32);
  641:     lrun("Test jsl_fatptr_substring_search", test_jsl_fatptr_substring_search);
  642:     lrun("Test jsl_fatptr_starts_with", test_jsl_fatptr_starts_with);
  643:     lrun("Test jsl_fatptr_ends_with", test_jsl_fatptr_ends_with);
  644:     lrun("Test jsl_fatptr_compare_ascii_insensitive", test_jsl_fatptr_compare_ascii_insensitive);
  645: 
  646:     lrun("Test jsl_fatptr_load_file_contents", test_jsl_load_file_contents);
  647:     lrun("Test jsl_fatptr_load_file_contents_buffer", test_jsl_load_file_contents_buffer);
  648: 
  649:     lresults();
  650:     return lfails != 0;
